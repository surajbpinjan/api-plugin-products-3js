extend type ProductVariant {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend input ProductVariantInput {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend type CatalogProductVariant {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend type Mutation {
  generateAndDisplayGarment(input: GenerateAndDisplayGarmentInput!): GenerateAndDisplayGarmentPayload!
}

input RequestBase {
  AvatarObjectName: String
  AvatarBucketName: String
  GarmentObjectName: String
  GarmentBucketName: String
  GarmentAvatarObjectName: String
  GarmentAvatarBucketName: String
}

input RequestTarget {
  AvatarObjectURL: String
  GarmentAvatarBucketName: String
  GarmentBucketName: String
}

input GenerateAndDisplayGarmentInput {
  base: RequestBase
  target: RequestTarget
}

type GenerateAndDisplayGarmentPayload {
  GarmentAvatarURL: String
  GarmentAvatarType: String
  GarmentURL: String
  GarmentType: String
  processingTime: String
  avatars: String
}

extend type Mutation {
  generateVideoNImages(input: GenerateVideoNImagesInput!): GenerateVideoNImagesPayload!
}

input GenerateVideoNImagesInput {
  garment_system_name: String,
  user_name: String,
  color_value: Float,
  render_frame1: Float,
  render_frame2: Float,
  render_frame3: Float,
  render_frame4: Float
}

type GenerateVideoNImagesPayload {
  image: [String]
  video: String
}