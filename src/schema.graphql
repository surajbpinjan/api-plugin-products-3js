extend type ProductVariant {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend input ProductVariantInput {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend type CatalogProductVariant {
  baseGarmentName: String
  baseAvatarName: String
  avatarGarmentName: String
  baseFabricMaterialName: String
  fabricBaseMapImage: String
  fabricNormalMapImage: String
  fabricSpecularMapImage: String
  fabricRoughnessValue: Float
  fabricMetalnessValue: Float
  fabricTextureValue: Float
  imageUrls: String
}

extend type Mutation {
  generateAndDisplayGarment(input: GenerateAndDisplayGarmentInput!): GenerateAndDisplayGarmentPayload!
}

input RequestBase {
  AvatarObjectName: String
  AvatarBucketName: String
  GarmentObjectName: String
  GarmentBucketName: String
  GarmentAvatarObjectName: String
  GarmentAvatarBucketName: String
}

input RequestTarget {
  AvatarObjectURL: String
  GarmentAvatarBucketName: String
  GarmentBucketName: String
}

input GenerateAndDisplayGarmentInput {
  base: RequestBase
  target: RequestTarget
  userinfo: UserInfo
}

input UserInfo {
    user_name: String,
    color_value: Float = 0.9,
    hex_value: String = "5a4b34",
    number_of_messages: Float = 36.0
}

# type GenerateAndDisplayGarmentPayload {
#   GarmentAvatarURL: String
#   GarmentAvatarType: String
#   GarmentURL: String
#   GarmentType: String
#   processingTime: String
#   avatars: String
# }

type GenerateAndDisplayGarmentPayload {
  image: [String]
  video: String
  reverse: String
  status: String
}

extend type Mutation {
  generateVideoNImages(input: GenerateVideoNImagesInput!): GenerateVideoNImagesPayload!
}

extend type Mutation {
  generateVideoNImagesObj(input: GenerateVideoNImagesInput!): GenerateVideoNImagesPayload!
}

input GenerateVideoNImagesInput {
  garment_system_name: String,
  hex_value: String,
  user_name: String,
  color_value: Float,
  number_of_messages: Float,
  useCache: Boolean = false,
  #   fps: Float,
  # time: Float,
  # render_frame1: Float,
  # render_frame2: Float,
  #   render_frame3: Float,
  #   render_frame4: Float,
  #   render_frame5: Float,
  #   render_frame6: Float,
  #   render_frame7: Float,
  #   render_frame8: Float,
  #   render_frame9: Float,
  #   render_frame10: Float,
  #   render_frame11: Float,
  #   render_frame12: Float,
  #   render_frame13: Float,
  #   render_frame14: Float,
  #   render_frame15: Float,
  #   render_frame16: Float,
  #   render_frame17: Float,
  #   render_frame18: Float,
  #   render_frame19: Float,
  #   render_frame20: Float,
  #   render_frame21: Float,
  #   render_frame22: Float,
  #   render_frame23: Float,
  #   render_frame24: Float,
  #   render_frame25: Float,
  #   render_frame26: Float,
  #   render_frame27: Float,
  #   render_frame28: Float,
  #   render_frame29: Float,
  #   render_frame30: Float
}

type GenerateVideoNImagesPayload {
  image: [String]
  video: String
  reverse: String
  status: String
}

extend type Query {
  getAvatar: Avatar
}